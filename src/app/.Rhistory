mathCalc = mean(score_mathCalc))
df.skills = ms[which(ms$program == "skills"), ]
df.intake = ms[which(ms$program == "intake"), ]
df.reading = data.frame(
ratio = (df.skills$reading - df.intake$reading) / df.skills$reading,
category = "reading"
)
df.writing = data.frame(
ratio = (df.skills$writing - df.intake$writing) / df.skills$writing,
category = "writing"
)
df.mathNoCalc = data.frame(
ratio = (df.skills$mathNoCalc - df.intake$mathNoCalc) / df.skills$mathNoCalc,
category = "mathNoCalc"
)
df.mathCalc = data.frame(
ratio = (df.skills$mathCalc - df.intake$mathCalc) / df.skills$mathCalc,
category = "mathCalc"
)
rbind(df.reading, df.writing, df.mathCalc, df.mathNoCalc)
}
df.lake = get_district_data(lake.scores)
df.lake
df.lake %>%
ggplot(aes(x = category, color=category, fill=category, group = category)) +
geom_col(aes(y=score), position = "dodge")
df.lake %>%
ggplot(aes(x = category, color=category, fill=category, group = category)) +
geom_col(aes(y=ratio), position = "dodge")
df.lake %>%
ggplot(aes(x = category, color=category, fill=category, group = category)) +
geom_col(aes(y=ratio), position = "dodge") +
labs(title = "The change ratio by skills")
df.lake %>%
ggplot(aes(x = category, color=category, fill=category, group = category)) +
geom_col(aes(y=ratio), position = "dodge") +
labs(title = "The change ratio by skills") +
ylab("Change Ratio")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(dplyr)
library(ggplot2)
library(pinyin)
library(zoo)
library(plotly)
library(TTR)
df = read.csv("coal.csv")
df$timestamp = as.Date(df$timestamp)
df$name = py(df$name, dic = pydic(only_first_letter = T, method = "toneless", dic = "pinyin"), sep = "")
df$market_value = df$close * df$volume
head(df)
df %>%
group_by(entity_id, name) %>%
summarise(count=n(),
list_date = min(timestamp),
open = mean(open),
close = mean(close),
last_date = max(timestamp),
market_value = mean(market_value)) %>%
arrange(desc(market_value))
summary(df)
# close
df %>%
filter(timestamp > as.Date("2019-01-01")) %>%
ggplot(aes(x = timestamp, y=close, color=name)) +
geom_line() +
labs(title="Close After 2019-01-01")
# turnover
df %>%
filter(timestamp > as.Date("2019-01-01")) %>%
ggplot(aes(x = timestamp, y=turnover, color=name)) +
geom_line() +
labs(title = "turnover After 2019-01-01")
# volume
df %>%
filter(timestamp > as.Date("2019-01-01")) %>%
ggplot(aes(x = timestamp, y=volume, color=name)) +
geom_line() +
labs(title = "volume After 2019-01-01")
# market value
df %>%
filter(timestamp > as.Date("2019-01-01")) %>%
ggplot(aes(x = timestamp, y=market_value, color=name)) +
geom_line() +
labs(title = "market value After 2019-01-01")
names = unique(df$name)
start = as.Date("2020-01-01")
df.corr = NULL
for(i in 1:length(names)) {
df.entity = df[which(df$name == names[i] & df$timestamp > start), ]
df.entity.sub = subset(df.entity, select = c(timestamp, close))
colnames(df.entity.sub) = c("ts", names[i])
if(is.null(df.corr)) {
df.corr = df.entity.sub
} else {
df.corr = merge(df.corr, df.entity.sub, by = "ts")
}
}
df.corr %>%
subset(select = -ts) %>%
cor()
head(df.corr)
df.returns = df.corr
df.returns$weekday = strftime(df.returns$ts, "%u")
for (i in 2:nrow(df.returns)) {
df.returns[i, "mjny_return"] =
df.returns$mjny[i] / df.returns$mjny[i-1] - 1
df.returns[i, "sxjm_return"] =
df.returns$sxjm[i] / df.returns$sxjm[i-1] - 1
df.returns[i, "ytny_return"] =
df.returns$ytny[i] / df.returns$ytny[i-1] - 1
df.returns[i, "ykny_return"] =
df.returns$ykny[i] / df.returns$ykny[i-1] - 1
df.returns[i, "zgsh_return"] =
df.returns$zgsh[i] / df.returns$zgsh[i-1] - 1
df.returns[i, "sxmy_return"] =
df.returns$sxmy[i] / df.returns$sxmy[i-1] - 1
}
head(df.returns)
df.returns %>%
ggplot(aes(x=ts, y=zgsh_return)) +
geom_line()
df.returns %>%
na.omit() %>%
group_by(weekday) %>%
summarise(
mjny_return = mean(mjny_return),
sxjm_return = mean(sxjm_return),
ytny_return = mean(ytny_return),
ykny_return = mean(ykny_return),
zgsh_return = mean(zgsh_return),
sxmy_return = mean(sxmy_return)
) %>%
arrange(weekday)
df.returns %>%
na.omit() %>%
mutate(mjny_pos = ifelse(mjny_return > 0, 1, 0),
sxjm_pos = ifelse(sxjm_return > 0, 1, 0),
ytny_pos = ifelse(ytny_return > 0, 1, 0),
ykny_pos = ifelse(ykny_return > 0, 1, 0),
zgsh_pos = ifelse(zgsh_return > 0, 1, 0),
sxmy_pos = ifelse(sxmy_return > 0, 1, 0),) %>%
group_by(weekday) %>%
summarise(
mjny_prop = sum(mjny_pos) / n(),
sxjm_prop = sum(sxjm_pos) / n(),
ytny_prop = sum(ytny_pos) / n(),
ykny_prop = sum(ykny_pos) / n(),
zgsh_prop = sum(zgsh_pos) / n(),
sxmy_prop = sum(sxmy_pos) / n(),
n = n()
) %>%
arrange(weekday)
df.pos.weekdays = df.returns %>%
na.omit() %>%
mutate(mjny_pos = ifelse(mjny_return > 0, 1, 0),
sxjm_pos = ifelse(sxjm_return > 0, 1, 0),
ytny_pos = ifelse(ytny_return > 0, 1, 0),
ykny_pos = ifelse(ykny_return > 0, 1, 0),
zgsh_pos = ifelse(zgsh_return > 0, 1, 0),
sxmy_pos = ifelse(sxmy_return > 0, 1, 0),) %>%
group_by(weekday) %>%
summarise(
mjny_pos = sum(mjny_pos),
sxjm_pos = sum(sxjm_pos),
ytny_pos = sum(ytny_pos),
ykny_pos = sum(ykny_pos),
zgsh_pos = sum(zgsh_pos),
sxmy_pos = sum(sxmy_pos),
n = n()
) %>%
arrange(weekday)
# test zgsh Monday
prop.test(df.pos.weekdays$zgsh_pos[1], df.pos.weekdays$n[1], p=0.7, alternative = "greater")
# plotly MA50 / MA200
ma.zgsh = df %>%
filter(name == "zgsh") %>%
filter(timestamp > as.Date("2019-01-01")) %>%
arrange(timestamp) %>%
mutate(ma10 = rollmean(close, k=10, fill = NA, align = "right")) %>%
mutate(ma20 = rollmean(close, k=20, fill = NA, align = "right")) %>%
mutate(ma50 = rollmean(close, k=50, fill = NA, align = "right")) %>%
mutate(ma100 = rollmean(close, k=100, fill = NA, align = "right")) %>%
mutate(ma200 = rollmean(close, k = 200, fill = NA, align = "right"))
tail(ma.zgsh)
ma.zgsh %>%
plot_ly(x = ~timestamp) %>%
add_trace(y = ~close, name = "close", mode = "lines") %>%
add_trace(y = ~ma10, name = "ma10", mode = "lines") %>%
add_trace(y = ~ma20, name = "ma20", mode = "lines") %>%
add_trace(y = ~ma50, name = "ma50", mode = "lines") %>%
add_trace(y = ~ma100, name = "ma100", mode = "lines") %>%
add_trace(y = ~ma200, name = "ma200", mode = "lines")
# plotly MA50 / MA200
df %>%
filter(name == "ndsd") %>%
filter(timestamp > as.Date("2018-01-01")) %>%
mutate(ma50 = rollmean(close, k=50, fill = NA, align = "right")) %>%
mutate(ma200 = rollmean(close, k = 200, fill = NA, align = "right")) %>%
plot_ly(x = ~timestamp, name = "ndsd") %>%
add_trace(y = ~close, name = "close", mode = "lines") %>%
add_trace(y = ~ma50, name = "ma50", mode = "lines") %>%
add_trace(y = ~ma200, name = "ma200", mode = "lines")
df %>%
filter(name == "hygy") %>%
filter(timestamp > as.Date("2018-01-01")) %>%
mutate(ma50 = rollmean(close, k=50, fill = NA, align = "right")) %>%
mutate(ma200 = rollmean(close, k = 200, fill = NA, align = "right")) %>%
plot_ly(x = ~timestamp, name = "hygy") %>%
add_trace(y = ~close, name = "close", mode = "lines") %>%
add_trace(y = ~ma50, name = "ma50", mode = "lines") %>%
add_trace(y = ~ma200, name = "ma200", mode = "lines")
df.zgsh = df[which(df$name == "zgsh"), ]
zgsh.adx = ADX(as.matrix(df.zgsh[, c("high", "low", "close")]))
df.zgsh$di.p = zgsh.adx[, "DIp"]
df.zgsh$di.n = zgsh.adx[, "DIn"]
df.zgsh$adx = zgsh.adx[, "ADX"]
df.zgsh %>%
filter(timestamp > as.Date("2022-10-01")) %>%
plot_ly(x = ~timestamp, name = "zgsh") %>%
add_trace(y = ~adx, name = "adx", mode = "lines") %>%
add_trace(y = ~di.p, name = "DIp", mode = "lines") %>%
add_trace(y = ~di.n, name = "DIn", mode = "lines") %>%
add_trace(y = ~close, name = "Close", mode = "lines")
get_signals = function(data) {
data$ma10 = rollmean(data$close, k=10, fill = NA, align = "right")
data$ma20 = rollmean(data$close, k=20, fill = NA, align = "right")
data$ma50 = rollmean(data$close, k=50, fill = NA, align = "right")
data$ma100 = rollmean(data$close, k=100, fill = NA, align = "right")
data$ma200 = rollmean(data$close, k=200, fill = NA, align = "right")
adx = ADX(as.matrix(data[, c("high", "low", "close")]))
data$adx = adx[, "ADX"]
last = tail(data, 100)
for (i in 1:nrow(last)) {
if (last$ma10[i] > last$ma20[i] &
last$ma20[i] > last$ma50[i] &
last$ma50[i] > last$ma100[i] &
last$ma100[i] > last$ma200[i]) {
last$signal[i] = "buy"
} else if (last$ma10[i] < last$ma20[i] &
last$ma20[i] < last$ma50[i] &
last$ma50[i] < last$ma100[i] &
last$ma100[i] < last$ma200[i]) {
last$signal[i] = "sell"
} else {
last$signal[i] = "no"
}
last$adx_signal[i] = ifelse(last$adx[i] > 20, T, F)
last$final_signal[i] = ifelse(last$adx_signal[i] == T & last$signal[i] != "no", T, F)
}
last
}
df %>%
filter(name == "zgsh") %>%
get_signals() %>%
select(c(timestamp, adx, signal, adx_signal, final_signal)) %>%
arrange(desc(timestamp))
df %>%
filter(name == "sxmy") %>%
get_signals() %>%
select(c(timestamp, adx, signal, adx_signal, final_signal)) %>%
arrange(desc(timestamp))
df %>%
filter(name == "sxjm") %>%
get_signals() %>%
select(c(timestamp, adx, signal, adx_signal, final_signal)) %>%
arrange(desc(timestamp))
df %>%
filter(name == "hygy") %>%
get_signals() %>%
select(c(timestamp, adx, signal, adx_signal, final_signal)) %>%
arrange(desc(timestamp))
df %>%
filter(name == "ndsd") %>%
get_signals() %>%
select(c(timestamp, adx, signal, adx_signal, final_signal)) %>%
arrange(desc(timestamp))
df %>%
filter(name == "gfly") %>%
get_signals() %>%
select(c(timestamp, adx, signal, adx_signal, final_signal)) %>%
arrange(desc(timestamp))
getSymbols("AAPL",src="yahoo")
library(quantmod)
library(knitr)
library(dplyr)
library(ggplot2)
library(pinyin)
library(zoo)
library(plotly)
library(TTR)
library(quantmod)
getSymbols("AAPL",src="yahoo")
getSymbols("YHOO",src="google")
getSymbols("YHOO",src="yahoo")
shiny::runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
runApp('Documents/gitroom/zvt/src/app')
library(dplyr)
library(ggplot2)
library(pinyin)
library(zoo)
library(plotly)
library(TTR)
library(quantmod)
library(dash)
library(dashCoreComponents)
library(dashTable)
setwd("/Users/pengxiaotao/Documents/gitroom/zvt/src/app")
# load all data
df = read.csv("../rmd/coal.csv")
df$timestamp = as.Date(df$timestamp)
df$name = py(df$name, dic = pydic(only_first_letter = T, method = "toneless", dic = "pinyin"), sep = "")
df$market_value = df$close * df$volume
get_summary = function() {
df %>%
group_by(entity_id, name) %>%
summarise(count=n(),
list_date = min(timestamp),
open = mean(open),
close = mean(close),
last_date = max(timestamp),
market_value = mean(market_value)) %>%
arrange(desc(market_value))
}
entities = list()
s = get_summary()
for(i in 1:nrow(s)) {
if (i == 1) {
entities[[i]] = list(label = paste(s$name[i], "-", s$market_value[i]), value = s$name[i], selected = T)
} else {
entities[[i]] = list(label = paste(s$name[i], "-", s$market_value[i]), value = s$name[i])
}
}
get_signals = function(data) {
data$ma10 = round(rollmean(data$close, k=10, fill = NA, align = "right"), 4)
data$ma20 = round(rollmean(data$close, k=20, fill = NA, align = "right"), 4)
data$ma50 = round(rollmean(data$close, k=50, fill = NA, align = "right"), 4)
data$ma100 = round(rollmean(data$close, k=100, fill = NA, align = "right"), 4)
data$ma200 = round(rollmean(data$close, k=200, fill = NA, align = "right"), 4)
adx = ADX(as.matrix(data[, c("high", "low", "close")]))
data$adx = round(adx[, "ADX"], 4)
last = tail(data, 100)
for (i in 1:nrow(last)) {
if (last$ma10[i] > last$ma20[i] &
last$ma20[i] > last$ma50[i] &
last$ma50[i] > last$ma100[i] &
last$ma100[i] > last$ma200[i]) {
last$ma_signal[i] = "buy"
} else if (last$ma10[i] < last$ma20[i] &
last$ma20[i] < last$ma50[i] &
last$ma50[i] < last$ma100[i] &
last$ma100[i] < last$ma200[i]) {
last$ma_signal[i] = "sell"
} else {
last$ma_signal[i] = "no"
}
last$adx_signal[i] = ifelse(last$adx[i] > 20, T, F)
last$final_signal[i] = ifelse(last$adx_signal[i] == T & last$ma_signal[i] != "no", T, F)
}
last
}
app = dash_app()
getMAFigureData = function(name, start) {
subdf = df[which(df$name == name), ]
subdf = subdf %>%
mutate(ma10 = rollmean(close, k=10, fill = NA, align = "right")) %>%
mutate(ma20 = rollmean(close, k=20, fill = NA, align = "right")) %>%
mutate(ma50 = rollmean(close, k=50, fill = NA, align = "right")) %>%
mutate(ma100 = rollmean(close, k=100, fill = NA, align = "right")) %>%
mutate(ma200 = rollmean(close, k = 200, fill = NA, align = "right"))
subdf = subdf[which(subdf$timestamp >= start), ]
list(
data = list (
list(
x = subdf$timestamp,
y = subdf$close,
name = "close",
mode = "lines"
),
list(
x = subdf$timestamp,
y = subdf$ma10,
name = "ma10",
mode = "lines"
),
list(
x = subdf$timestamp,
y = subdf$ma20,
name = "ma20",
mode = "lines"
),
list(
x = subdf$timestamp,
y = subdf$ma50,
name = "ma50",
mode = "lines"
),
list(
x = subdf$timestamp,
y = subdf$ma100,
name = "ma100",
mode = "lines"
),
list(
x = subdf$timestamp,
y = subdf$ma200,
name = "ma200",
mode = "lines"
)
)
)
}
app %>% set_layout(
h1("Trading"),
dccDropdown("entity", options = entities, value = "ndsd"),
dccDatePickerSingle(
"start",
date = as.Date("2020-01-01")
),
dccGraph(
"mas",
figure = list()
),
h2("Signals"),
dashDataTable(
"signals",
columns = list(
list(id = "timestamp", name = "timestamp"),
list(id = "adx", name = "adx"),
list(id = "ma10", name = "ma10"),
list(id = "ma20", name = "ma20"),
list(id = "ma50", name = "ma50"),
list(id = "ma100", name = "ma100"),
list(id = "ma200", name = "ma200"),
list(id = "ma_signal", name = "ma_signal"),
list(id = "adx_signal", name = "adx_signal"),
list(id = "final_signal", name = "final_signal")
),
data = NULL,
page_size = 100
)
)
app %>%
add_callback(
output(id = "mas", property = "figure"),
list(
input(id = "entity", property = "value"),
input(id = "start", property = "date")
),
function(entity, start) {
name = ifelse(is.null(entity), "ndsd", entity)
print(paste(name, start, sep = "-"))
getMAFigureData(name, start)
}
)
app %>%
add_callback(
output(id = "signals", property = "data"),
list(
input(id = "entity", property = "value"),
input(id = "start", property = "date")
),
function(entity, start) {
name = ifelse(is.null(entity), "ndsd", entity)
print(paste(name, start, sep = "-"))
subdf = df[which(df$name == name), ]
subdf = get_signals(subdf) %>%
arrange(desc(timestamp))
df_to_list(subdf)
}
)
run_app(app)
